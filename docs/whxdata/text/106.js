rh._.exports({"0":[["How to Use BDD (Gherkin) with Ginger"]],"1":[["\n  ","\n    "," ","\n    "," "," How to Use BDD (Gherkin) with Ginger","\n    "," ","\n    "," ","\n    "," ","\n    ","\n    ","Contents","\n    ","What is BDD (Behavior-Driven Development)","\n    ","What is Gherkin Language","\n    ","Seamless integration from BDD Gherkin to Ginger Automation","\n    ","    ","Gherkin – Introduction","\n    ","\n      ","LAYOUT – Gherkin “Compile” to Automation","\n      ","LAYOUT – Gherkin “Optimize” to Automation","\n    ","\n    ","    ","IMPORT – Gherkin File to BF","\n    ","\n      ","IMPORT – Gherkin .feature file to BF","\n      ","IMPORT – Gherkin Business Flow creation from .Feature file","\n      ","IMPORT – Gherkin Optimized Activities to Automation Scenarios in Ginger","\n    ","\n    ","OPTIMIZED ACTIVITIES – Gherkin BFs Overview","\n    ","\n      ","Optimized Activities – Gherkin Business Flow Structure","\n      ","Optimized Activities – Gherkin Creating Scenarios from Optimized Activities","\n      ","Optimized Activities – Gherkin Optimized Activities","\n    ","\n    ","GHERKIN – Language in Depth","\n    ","\n      ","GHERKIN – Language Details","\n      ","GHERKIN – Language Syntax","\n      ","GHERKIN – Feature Introduction","\n      ","GHERKIN – Language Key Words","\n      ","GHERKIN – Writing Scenarios Best Practices","\n    ","\n    ","Gherkin – TextEdtor for .Feature Files","\n    ","\n      ","Feature TextEditor – Layout","\n      ","Feature TextEditor – Autocomplete Lines with existing automation","\n      ","Feature TextEditor – Getting your Feature file ready for automation","\n    ","\n    ","Comparison of Gherkin in Ginger to Gherkin in Cucumber","\n    ","\n      ","What is Cucumber","\n      ","What Ginger has that Cucumber doesn’t","\n    ","\n    "," ","\n    "],["\n    "],["\n    ","BDD is a set of best practices for writing great tests. One of the key things BDD addresses is an implementation detail in tests. Behavior-Driven Development addresses this problem by showing you how to test, focusing on testing behavior, and not implementation","\n    "," ","\n    "],["\n    ","Gherkin is a line-oriented language that uses indentation to define structure. Line endings terminate statements","\n    ","(called steps) and either spaces or tabs may be used for indentation. (We suggest you use TABS for portability.)","\n    ","Finally, most lines in Gherkin start with a special keyword: (more details in the section: 5)","\n    ","Key Words include (Feature, Scenario, Given, And, Then, When, But)","\n    ","\n    "," ","\n    "],["\n    ","                    "," The Ginger Automation tool now can allow users to write scenarios and Ginger will seamlessly turn these scenarios into Automation Activities.","\n    ","\n    "," ","\n    ","Gherkin – Introduction","\n    "," LAYOUT – Gherkin in Ginger","\n    "," In the Solutions Tab, under documents, selecting a <file>.feature will allow you to write scenarios using Gherkin ","language in Ginger. ","\n    ","                     ","\n    "," ","\n    "," ","\n    "],["\n    ","                   ","  Once you have your scenarios wrote out, you can click the “Compile & Optimize” button and Ginger will convert your scenarios into Ginger as                          ","\n    ","        Scenarios.","\n    ","\n    ","                   The Compile tab is used to do the following:","\n    ","Clicking “Compile & Optimize” will refresh the Gherkin. feature file into Ginger. Anytime any changes are done in the .feature file, you will need to click the button to allow the changes to be reflected into Ginger.","\n    ","\n    ","If you select a converted Scenario or Step row, it will highlight in both the .feature file and in the Scenario or Step row. This will allow quick navigation to and from converted scenarios/steps to the actual Gherkin code line.","\n    ","\n    ","All tags will be shown where you utilized them. Tags will help organize your scenarios for what area these scenarios are for.","\n    ","\n    "," ","\n    "," ","\n    "],["\n    ","  "," Once you have “Compile & Optimize” on the “Optimized” tab, you can see how many times you have reused the same steps. ","\n    ","\n    ","                   The Optimize tab is used to do the following:","\n    ","Clicking “Update Business Flow” will refresh the Gherkin. feature file into Ginger Business Flow. Anytime any changes are done in the .feature file, you will need to click the button to allow the changes to be reflected into Ginger.","\n    ","\n    ","Users will be allowed to see how Optimized they wrote their scenarios. They can view how many times they reused the same steps. This also allows automation developers to know where to start on their automation. Starting to develop those steps that are utilized the most.","\n    ","\n    ","          Users will also be able to check the automation status of each step.","\n    ","\n    "," ","\n    ","IMPORT – Gherkin File to BF","\n    ","                         ","The Ginger Automation Tool can import any Gherkin <file>.feature into Ginger and convert them to a Automation Business Flow in Ginger.","\n    ","\n      ‎","\n    "],["\n    ","                    ","In the Solutions Tab, under Business Flows ","\n    ","Right-click on Business Flow or on the Folder you want to create the BF in, and in the dropdown select “Import” à “Import Gherkin Feature”. ","\n    ","\n    ","The File selection window will show, select “…” to browse windows location for your .feature file and click “Open”. ","\n    ","\n    ","You will be able to review the Gherkin file in the preview before selecting “Import”"," and ","then select “Generate Business Flow”","\n    ","\n    "," ","\n    "," ","\n    ","\n    "," ","\n    "," ","\n    ","\n    "," ","\n    ","\n    "," ","\n    "," ","\n    "," ","\n    "],["\n    ","           "," After importing the Gherkin .feature:","\n    "],["\n    ","You will be given a chance to REVIEW the compiled Scenarios and Steps you just imported. ","\n    ","\n    ","If you are want to proceed to create a Business Flow you can click “Generate Business Flow” .","\n    ","\n    ","If you see “Update Business Flow” then the Business Flow already exists, and you can update the existing flow.","\n    ","This will create a business flow INSIDE the folder that you originally right-clicked and selected import.","\n    ","\n    "," ","\n    ","\n    "],["\n    "],["\n    ","     ","          If you are creating your scenarios using Gingers Gherkin TextEditor;","\n    ","                After you have completed your new .feature:","\n    "],["\n    ","You learned how to compile and view the optimized activities.","\n    ","If your Business Flow does not exist you will see in the optimize tab “Generate Business Flow”. ","\n    ","This will create your Gherkin Business Flow.","\n    "," ","\n    "," ","\n    ","OPTIMIZED ACTIVITIES – Gherkin BFs Overview","\n    ","             "," The Ginger Automation Tool can now support Gherkin BDD Business Flow, utilizing the optimization of our Automation and integrating optimized                             activities.‎","\n      ‎","\n    "],["\n    ","            "," In the Solutions Tab with Gherkin Business flow selected, or having your Business Flow in the Automate Tab you can see the BDD Gherkin Optimized                      ","\n    "," Activities.","\n    "," Gherkin Business Flow Structure","\n    ","The Activities Group “Optimized Activities” is the inactive Activities (scenarios) that utilize the “Optimized Activities” activity group to create your scenarios. ","\n    ","\n    ","The unchecked “Active” column in activities is intentional, they are used to create scenarios from the optimized activities. You will also notice that each of the inactive activities will belong to the Activity Group “Optimized Activities” ","\n    ","\n    ","The associated. Feature File is located in the External ID and will give the physical location of the file. ","\n    "," ","\n    ","\n    "," ","\n    "],["\n    ","                  "," In the Solutions Tab with Gherkin Business flow selected, or having your Business Flow in the Automate Tab you can see the BDD Gherkin Optimized                  ","\n    ","                   Activities.","\n    "],["\n    ","When you click “Generate Scenarios”. You will see how many scenarios you have generated, you will see the new Activity groups created from the Optimized Activities, you will see the “Active” Generated Activities for your scenarios below your Optimized activities. ","\n    "," ","\n    "," ","\n    "],["\n    "," In the Solutions Tab with Gherkin Business flow selected, or having your Business Flow in the Automate Tab you can see the BDD Gherkin Optimized ","\n    "," Activities, ","After you have generated your scenarios.","\n    "],["\n    ","You can see details of the Generated Activity Groups by clicking the manager and seeing the grouped activities. You will find your “Optimized Activities” Activity group in the Shared Repository.","\n    ","      ","\n    "," ","\n    ","       ","\n    "," ","\n    "," ","\n    ","GHERKIN – Language in Depth","\n    ","The Gherkin language is used by many Business and Functional Testers, writing Tests and Automation with the Gherkin Language is easy to read and ","write the language.","\n    ","\n      ‎","\n    "],["\n    ","                      ","   If you do not know what Gherkin is, below is a summary.","\n    ","Gherkin"," ","is the"," ","language"," ","that Cucumber understands. It is a Business Readable, Domain Specific"," ","Language"," ","that lets you describe software's behavior without detailing how that behavior is implemented."," ","Gherkin"," ","serves two purposes — documentation and automated tests.","\n    ","                           You can view the in-depth details of the language in the following sections.","\n    "," ","\n    "],["\n    ","                         "," Like Python and YAML, Gherkin is a line-oriented language that uses indentation to define structure. Line endings terminate statements (eg,                        ","\n    ","             steps). Either spaces or tabs may be used for indentation (but spaces are more portable). Most lines start with a keyword.","\n    ","                          Comment lines are allowed anywhere in the file. They begin with zero or more spaces, followed by a hash sign (#) and some amount of text.","\n    ","                          The parser divides the input into features, scenarios, and steps. When you run the feature the trailing portion (after the keyword) of each step is                  ","\n    ","           matched to a Ruby code block called Step Definitions","\n    "],["\n    "," 1: Feature: Some terse yet descriptive text of what is desired","\n    "," 2: Textual description of the business value of this feature","\n    "," 3: Business rules that govern the scope of the feature","\n    "," 4: Any additional information that will make the feature easier to understand","\n    "," 5: Scenario: Some determinable business situation","\n    "," 6: Given some precondition","\n    "," 7: And some other precondition","\n    "," 8: When some action by the actor","\n    "," 9: And some other action","\n    "," 10: And yet another action","\n    "," 11: Then some testable outcome is achieved","\n    "," 12: And something else we can check happens too","\n    "," 13: Scenario: A different situation","\n    ","\n    "," First-line starts the feature. Lines 2–4 are unparsed text, which is expected to describe the business value of this feature. Line 6 starts a scenario.","\n    "," Lines 7–13 are the steps for the scenario.etc.","\n    "],["\n    "],["\n    ","Every .feature file conventionally consists of a single feature. A line starting with the keyword Feature followed by free indented text starts a feature. A feature usually contains a list of scenarios. You can write whatever you want up until the first scenario, which starts with the word Scenario (or localized equivalent; Gherkin is localized for dozens of languages) on a new line. You can use tagging to group features and scenarios together independent of your file and directory structure.","\n    ","\n    "," Every scenario consists of a list of steps, which must start with one of the keywords Given, When, Then, But or And. Gherkin Editors treats them ","\n    "," all the same, but you shouldn’t.","\n    "],["\n    "],["\n    ","                     ","Below are the Gherkin Key Words, if you want more information please click the associated link in the More Info.","\n    "],["\n    ","\n      ","\n        ","\n          ","\n          ","\n          ","\n        ","\n        ","\n          ","\n            ","\n              ","keyword","\n            ","\n            ","\n              ","localized","\n            ","\n            ","\n              ","more info, see","\n            ","\n          ","\n          ","\n            ","\n              ","name","\n            ","\n            ","\n              ","‘English’","\n            ","\n            ","\n              "," ","\n            ","\n          ","\n          ","\n            ","\n              ","native","\n            ","\n            ","\n              ","‘English’","\n            ","\n            ","\n              "," ","\n            ","\n          ","\n          ","\n            ","\n              ","encoding","\n            ","\n            ","\n              ","‘UTF-8’","\n            ","\n            ","\n              "," ","\n            ","\n          ","\n          ","\n            ","\n              ","feature","\n            ","\n            ","\n              ","‘Feature’","\n            ","\n            ","\n              ","Feature Introduction","\n            ","\n          ","\n          ","\n            ","\n              ","background","\n            ","\n            ","\n              ","‘Background’","\n            ","\n            ","\n              ","Background","\n            ","\n          ","\n          ","\n            ","\n              ","scenario","\n            ","\n            ","\n              ","‘Scenario’","\n            ","\n            ","\n              ","Feature Introduction","\n            ","\n          ","\n          ","\n            ","\n              ","scenario_outline","\n            ","\n            ","\n              ","‘Scenario Outline’","\n            ","\n            ","\n              ","Scenario outlines","\n            ","\n          ","\n          ","\n            ","\n              ","examples","\n            ","\n            ","\n              ","‘Examples’ / ‘Scenarios’","\n            ","\n            ","\n              ","Scenario outlines","\n            ","\n          ","\n          ","\n            ","\n              ","given","\n            ","\n            ","\n              ","‘Given’","\n            ","\n            ","\n              ","Given-When-Then","\n            ","\n          ","\n          ","\n            ","\n              ","when","\n            ","\n            ","\n              ","‘When’","\n            ","\n            ","\n              ","Given-When-Then","\n            ","\n          ","\n          ","\n            ","\n              ","then","\n            ","\n            ","\n              ","‘Then’","\n            ","\n            ","\n              ","Given-When-Then","\n            ","\n          ","\n          ","\n            ","\n              ","and","\n            ","\n            ","\n              ","‘And’","\n            ","\n            ","\n              ","Given-When-Then","\n            ","\n          ","\n          ","\n            ","\n              ","but","\n            ","\n            ","\n              ","‘But’","\n            ","\n            ","\n              ","Given-When-Then","\n            ","\n          ","\n        ","\n      ","\n    ","\n    ","\n    "],["\n    ","                            ","We suggest using indentation with spaces to organize your scenarios in your feature file.","\n    "],["\n    ","You can see how we organized our feature files on an application level with folders ","\n    ","\n    "],["\n    ","We also suggest using what has already been developed in the repository. If an activity(Line) has already been developed it will show in the Line helper. While typing the helper box will give you a list of automated steps to choose from.","\n    ","\n    "," ","\n    ","If your step does not exist yet, we STRONGLY recommend using a step line that can be reused. For example, if your step is to enter a value in a text box, use the same line verbiage exactly. Do not reword the line. This will allow us to reuse the same step.","\n    "],["\n    "],["\n    ","The integration of Gherkin into Ginger using the Gherkin TextEditor allows users to easily read, write and review ","Gherkin Feature files in Ginger.","\n    ","\n      ‎","\n    "],["\n    ","                ","  The Gherkin TextEditor is fully integrating with Ginger. ","\n    "," TextEditor Layout","\n    ","You can see how the Gherkin TextEditor fits into Ginger and how it played out.","\n    ","This is the Current Feature file that you are working on.","\n    ","This is the Feature name on the first line, and the description in the following lines BEFORE the “spaceline”","\n    ","This is the Scenario with the following Keywords that make up the Scenarios Steps","\n    ","These are Steps that are within the Scenario","\n    ","These are Tags that you can associate functionality within the Feature","\n    ","These are the existing automation steps that are already in Ginger Shared Repository having at least one tag associated with the feature or Scenario.","\n    "," ","\n    ","\n    "," ","\n    "," ","\n    "],["\n    ","                If an activity (Line) has already been developed it will show in the Line helper. While typing the helper box will give you a list of automated steps to                     ","\n    ","                 choose from.","\n    "," ","\n    ","                ","\n    "," ","\n    ","              Shown Below is the Activity Repository of Activities that will appear in the autocomplete box while you write your scenarios.","\n    ","                 ","\n    "," ","\n    "," ","\n    "],["\n    "," <<Text / Ginger Normal Style>>","\n    "],["\n    "," <<Text / Ginger Normal Style>>","\n    "],["\n    "," <<Text / Ginger Normal Style>>","\n    "," ","\n    "," ","\n    "],["\n    ","                ","This Comparison is to show the benefits and E2E automation using Ginger for Gherkin Automation rather than Cucumber.","\n    ","\n      ‎","\n    "],["\n    ","               Cucumber is a software tool used by computer programmers for testing other software. It runs automated  acceptance tests written in a behavior-                                       driven development (BDD) style. Central to the Cucumber BDD approach is its plain language parser called Gherkin.","\n    "," ","\n    "],["\n    "," "," <<Text / Ginger Normal Style>>","\n    "],["\n    ","<<Text / Ginger Normal Style>>","\n    "],["\n    ","<<Text / Ginger Normal Style>>","\n    "," ","\n    "," ","\n    "," ","\n    "," ","\n    "," ","\n    "," ","\n  ","\n\n"]],"2":[["\n      ‎"],[" "],["     ","Gherkin – TextEdtor for.Feature Files"],["      ","Comparison of Gherkin in Ginger to Gherkin in Cucumber  "]],"3":[["What is BDD (Behavior-Driven Development)"],["What is Gherkin Language"],["Seamless integration from BDD Gherkin to Ginger Automation"],["    ","LAYOUT – Gherkin “Compile” to Automation"],["     ","LAYOUT – Gherkin “Optimize” to Automation"],["          ","IMPORT – Gherkin .feature file to BF"],["    ","IMPORT – Gherkin Business Flow creation from.Feature file"],[" "],["IMPORT – Gherkin Optimized Activities to Automation Scenarios in Ginger"],["Optimized Activities – Gherkin Business Flow Structure"],["      ","Optimized Activities – Gherkin Creating Scenarios from Optimized Activities"],["          ","Optimized Activities – Gherkin Optimized Activities"],["GHERKIN – Language Details"],["GHERKIN – Language Syntax"],[" "],["GHERKIN – Feature Introduction"],["GHERKIN – Language Key Words"],["         ","GHERKIN – Writing Scenarios Best Practices"],["        ",".Feature TextEditor – Layout"],["    ",".Feature TextEditor – Autocomplete Lines with existing automation"],["           ",".Feature TextEditor – Getting your Feature file ready for automation"],["       ","What is Cucumber"],["        ","What Ginger has that Cucumber doesn’t"]],"4":[[" Generate Business Flow instructions from Gherkin File"],[" Optimized Activities"],[" Gherkin Business Flow Create Scenarios from your Optimized Activities"],[" Optimized Activity Groups"],["                A Gherkin source file usually looks like this"],[" "],["KeyWord Table with links for additional info if needed."],[" File Organization"],[" Step Optimization for Reusability"],[" <<Document_Label_1 / Ginger Heading3 Style>>"],[" <<Document_Label_2 / Ginger Heading3 Style>>"],[" <<Document_Label_1 / Ginger Heading3 Style>>"],[" <<Document_Label_2 / Ginger Heading3 Style>>"]],"id":"106"})