
  
     
                         How to Setup Ginger Setup for CRM-OMS
     
     
    Contents
    Ginger Setup
    Steps
     
     
     
    
      ‎
    Ginger Setup
    To incorporate Ginger capabilities in an ASCF SmartClient application, you need to make three changes to the application’s JNLP deployment: 
    1) add a tag to the workspace.xml file, 
    2) add the Ginger jar to the JNLP descriptor file, and 3) add the signed Ginger JAR to the JNLP WAR.
    
     Materials needed:
    Contents of \\DAVIDFRE04\GingerToolBox\. Use the corresponding Ginger jar depending on if your host app is v8 or v9. Ginger ToolBox requires the host app to use either ASCF 9.0 (any release) or ASCF 8.2 HF68 (or higher).
    SmartClient application JNLP EAR/WAR
    Windows machine for signing the Ginger jar
     
    Steps
    Add the Ginger JAR to the JNLP descriptor file
    Find the .jnlp file in the application EAR’s WAR path. EX: JNLPServer/ear/war/AppName/AppName.jnlp
    Add a line for the Ginger JAR. EX: <jar href="Ginger_ASCF.jar" version="9.0"/>
    Add the Ginger JAR to the JNLP WAR
    Download the Ginger JAR from the above location
    Put the Ginger JAR in the same folder as the .jnlp file
    Sign the Ginger JAR
    Copy SignJar.cmd, Unsign. cmd, and MANIFEST.MF to a Windows machine (see Ginger download folder)
    In this same folder, make 2 temp folders, “signed” and “unsigned”
    All JNLP Jars need to be signed with the same certificate
    Option 1: your jar signing process involves a custom certificate
    Copy your AmdocsStoreName to the Windows folder
    Download the Ginger JAR from the above location to the unsigned folder
    Sign the JAR: SignJar.cmd -sc unsigned signed
    Move the Ginger JARs (*.jar and *.jar.pack.gz) from the “signed” folder to the .jnlp file folder
    Option 2: your jar signing process uses the default self-signing certificate
    Copy all SmartClient JARs (*.jar not *.jar.pack.gz) from the .jnlp file folder to the “signed” folder
    Unsign the JARs: SignJar.cmd -u signed unsigned
    Create the certificate file: SignJar.cmd -c
    Sign the JARs: SignJar.cmd -sc unsigned signed
    Move the JARs (*.jar and *.jar.pack.gz) from the “signed” folder to the .jnlp file folder
    Edit the workspace.xml
    Find the workspace.xml, possibly in the same path as the .jnlp file
    Add the Inject tag to workspace.xml just below the <Applications/> block (after the closing tag):
    <Inject>
    <ToolboxForm logicalFormName="GingerToolBox" />
    </Inject>
    Restart the JNLP server
    Launch the SmartClient application from hyperlink on the AppName.jnlp web browser page
     
  

